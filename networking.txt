the Internet is a network of networks. Each network is made up of 
devices, called end systems, connected to each other with communication 
links. These devices are often also called edge systems in networking 
jargon because they are technically situated at the ‘edge’ of the 
Internet since they don’t relay data from one device to another.

Access networks, also known as the last mile, consist of the media 
through which end systems connect to the Internet. In other words, 
access networks are networks that physically connect end systems to 
the first router on a path which connects them to some other end 
systems.

Some networks have varying upload and download transmission rates, 
called asymmetric transmission rates. This is useful because traffic 
going out from end hosts generally consists of small requests which 
solicit comparatively much larger responses.

A Digital Subscriber Line or DSL uses the existing groundwork of 
telephone lines for an Internet connection.


Computers or end systems are generally connected together to share resources 
and information such as an Internet connection and devices such as printers. 
These networks can be classified by the geographical distance that they span:
- Local Area Networks (LAN)/Wireless Local Area Networks (WLAN)
- Metropolitan Area Networks (MAN)
- Wide Area Networks (WAN - typically optical fiber-based)

Synchronous optical networking (SONET) and the international equivalent, Synchronous 
Digital Hierarchy (SDH) carries data as optical signals over optical fiber, which 
means that they can cover large distances.

NETWORK TOPOLOGIES
(how the data flows in the network)

- Bus: Every end system will receive any signal that is sent on the main or backbone 
medium. But a break in the cable will disable the whole thing and only one system
can transmit at a time

- Ring: end systems communicate with each other through each other. So the message 
travels along the ring passing each system until the target system itself is reached.
But data flow is unidirectional and a break in the cable would still disrupt the system.

- Star: All end systems talk to each other through one central device such as a router 
or switch. All hosts can transmit at the same time but if the router fails then the 
network is completely down.

- Tree: This topology is also known as the star-bus topology. It essentially consists 
of a bunch of star networks connected together with a large bus.

- Mesh: every end system is directly connected to every other end system. But it's 
expensive, hard to scale and used in specialized applications only.

COMPUTER NETWORKING MODELS

There are several models along which computer networks are organized. The two most 
common ones are the Open Systems Interconnection (OSI) model and the Transmission 
Control Protocol/Internet Protocol (TCP/IP) model.

THE OPEN SYSTEMS INTERCONNECTION (OSI) MODEL

Each layer provides some services to the layer above it. Furthermore, the layer above 
is not concerned with the details of how the layer below performs its services. This 
is called abstraction. So in this way, the layers communicate with each other in a 
vertical fashion.

applications in the application layer send and receive data from the network. The 
application layer on one end system has a parallel on another end system, i.e., a 
chat app on one end system could be communicating with a chat app on another. These 
applications in the application layer are seemingly communicating with each other 
directly or horizontally. They are not aware of the layer below.

The model splits up a communication system into 7 abstract layers, stacked upon each 
other:

7. Application 
    - almost always implemented in software
    - end users interact with this
    - where most end-user apps like web browsing and email live
    - where an outgoing message starts its journey os it provides data for the layer below
6. Presentation 
    - presents data in a way that can be understood and displayed by the app layer (e.g. 
    encoding - the underlying layers might use a different character encoding compared to 
    the one used by the app layer so the presentation layer is responsible for translation)
    - encryption done at this layer 
    - abstracts by transforming content presentation to suit the application 
    - might implement end to end compression to reduce the traffic in the network 
5. Session 
    - build on top of the transport layer with a service that manages user sessions; manages 
    the mapping of messages delivered by the transport layer to the sessions 
    - session = an exchange of info between local applications and remote services on other
    end systems (e.g. one session spans a customer's interaction with an ecommerce site, everything
    from search to payment and logout)
4. Transport
    - implemented largely in software 
    - segments the large chunks of data that the app, presentation and session layers might 
    be handling into more manageable chunks (aka datagrams or segments)
    - adds additional info to segment/datagram when needed (e.g. checksum - helps ensure 
    that the message is correctly delivered to the destination without being corrupted or changed;
    when additional info is added to the start of a segment/datagram, it's called a header;
    when added to the end, it's called a trailer)
3. Network 
    - messages at this layer are called packets (packetizes the segments/datagrams)
    - this layer facilitates the transportation of packets and help determine the best routes 
    that packets should take
    - routing protocols = apps that run on the network layer and exchange messages with each
    other to develop info that helps them route packets 
    - load balancing = makes sure links in a given network are being utilized equally
2. Data Link 
    - lets directly connected hosts to communicate; addresses flow control and error
    detection/correction
    - encapsulates packets for transmission (turning bits into packets)
    - resolves transmission conflicts, (i.e. when 2 end systems send a message at the same
    time across one link)
    - handles addressing (if the data link is a broadcast medium)
    - multiplexing and demultiplexing = combining multiple data links into something that seems 
    like one to integrate their bandwidth or disaggregate a single data link into virtual 
    data links which appear like separate network interfaces respectively
1. Physical 
    - consists largely of hardware that exists to transmit bits (data, but not packets, datagrams 
    or segments)


TRANSMISSION CONTROL PROTOCOL/INTERNET PROTOCOL (TCP/IP) MODEL 

5 layers:
 5. Application - combines application, presentation and session layers from OSI model 
 4. Transport 
 3. Network 
 2. Data Link 
 1. Physical 

 TCP VS OSI 

 TCP/IP is used PRACTICALLY and OSI  is more CONCEPTUAL.

 END TO END ARGUMENT

 The TCP/IP protocol suite is heavily influenced by the following design choice, also 
 known as the end-to-end argument.

Implementing intelligence in the core was too expensive, therefore, intelligence was 
implemented at edge devices. So, the Internet’s design was of intelligent end devices 
and a dumb and fast core network.

Furthermore, the core was made packet-switched, which means that packets are routed 
per-hop, so they can circumvent failures because the requirement was for resilience.

With circuit-switched networks, however, torn connections have to be re-established, 
if there is still a path.

APPLICATION LAYER RESPONSIBILITIES

Writing data off to the network in a format that is compliant with the protocol in use.
Reading data from the end-user.
Providing useful applications to end users.

Analogy = Carrying the package to the post office is what the application layer does in 
networks, except that it carries messages to the transport layer!

NETWORK APPLICATION ARCHITECTURES
- client + server architecture 
- peer-to-peer architecture (every end system can be both client and server)
    - P2P networks are extremely mathematically scalable. The resources of a P2P system 
    grows with the number of peers in the system. Thus, applications with P2P 
    architecture are self-scaling.

SOCKETS

Processes on different machines send messages to each other through the computer network. 
The interface between a process and the computer network is called a socket.
Processes simply direct their messages to sockets and don’t worry about it after that.

