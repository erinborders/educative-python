THE ONLY DIFFERENCE BETWEEN SLL AND DLL

class Node:
    def __init__(self, value):
        self.data = value  # Stores data
        self.previous_element = None  # Stores pointer to previous element
        self.next_element = None  # Stores pointer to next element

HOW THE DELETION METHOD CHANGES WITH A DLL 

# Traversing/Searching for node to Delete
while current_node:
    if value is current_node.data:
        if current_node.next_element:
            # Link the next node and the previous node to each other
            prev_node = current_node.previous_element
            next_node = current_node.next_element
            prev_node.next_element = next_node
            next_node.previous_element = prev_node
            # previous node pointer was maintained in Singly Linked List

        else:
            current_node.previous_element.next_element = None
        deleted = True
        break

COMPARISON: SLL VS DLL

DLLs have a few advantages over SLLs, but these perks do not come without a cost:

Doubly linked lists can be traversed in both directions, which makes them more 
compatible with complex algorithms. Nodes in doubly linked lists require extra memory 
to store the previous_element pointer. Deletion is more efficient in doubly linked 
lists as we do not need to keep track of the previous node. We already have a backwards 
pointer for it. At this point, weâ€™ve compared the two major types of linked lists. 
The minor memory load that comes with DLLs can be forgone because of the convenience 
they provide.

TAIL POINTER FUNCTIONALITY

class LinkedList:
    def __init__(self):
        self.head_node = None
        self.tail_node = None  # Keep track of the last

GET LENGTH METHOD 

# My solution 

def length(lst):
    # Write - Your - Code
    count = 0
    
    if lst.get_head() is not None:
        runner = lst.get_head()
        count += 1
        while runner.next_element is not None:
            count += 1
            runner = runner.next_element
    return count

# Their solution, iterative

def length(lst):
    # start from the first element
    curr = lst.get_head()
    length = 0

    # Traverse the list and count the number of nodes
    while curr:
        length += 1
        curr = curr.next_element
    return length

REVERSE LINKED LIST 

def reverse(lst):
  # Write your code here
  reversed_list = LinkedList()

  runner = lst.get_head()
  if runner:
    reversed_list.insert_at_head(runner.data) # this works because of the way insert at head was set up
    while runner.next_element is not None:
      runner = runner.next_element
      reversed_list.insert_at_head(runner.data)
  
  return reversed_list

# their solution 

def reverse(lst):
  # To reverse linked, we need to keep track of three things
  previous = None # Maintain track of the previous node
  current = lst.get_head() # The current node
  next = None # The next node in the list

  #Reversal
  while current:
    next = current.next_element
    current.next_element = previous
    previous = current
    current = next

    #Set the last element as the new head node
    lst.head_node = previous
  return lst

  DETECT LOOP

  # my solution (i needed a hint about having a walker and 
  a runner)

  def detect_loop(lst):
    # Write your code here
    walker = lst.get_head()
    runner = lst.get_head()

    while walker and runner:
        runner = runner.next_element.next_element
        if walker == runner:
            return True
        walker = walker.next_element
    
    return False

# their solution 

def detect_loop(lst):
    # Keep two iterators
    onestep = lst.get_head()
    twostep = lst.get_head()
    while onestep and twostep and twostep.next_element:
        onestep = onestep.next_element  # Moves one node at a time
        twostep = twostep.next_element.next_element  # Skips a node
        if onestep == twostep:  # Loop exists
            return True
    return False
