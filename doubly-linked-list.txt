THE ONLY DIFFERENCE BETWEEN SLL AND DLL

class Node:
    def __init__(self, value):
        self.data = value  # Stores data
        self.previous_element = None  # Stores pointer to previous element
        self.next_element = None  # Stores pointer to next element

HOW THE DELETION METHOD CHANGES WITH A DLL 

# Traversing/Searching for node to Delete
while current_node:
    if value is current_node.data:
        if current_node.next_element:
            # Link the next node and the previous node to each other
            prev_node = current_node.previous_element
            next_node = current_node.next_element
            prev_node.next_element = next_node
            next_node.previous_element = prev_node
            # previous node pointer was maintained in Singly Linked List

        else:
            current_node.previous_element.next_element = None
        deleted = True
        break

COMPARISON: SLL VS DLL

DLLs have a few advantages over SLLs, but these perks do not come without a cost:

Doubly linked lists can be traversed in both directions, which makes them more 
compatible with complex algorithms. Nodes in doubly linked lists require extra memory 
to store the previous_element pointer. Deletion is more efficient in doubly linked 
lists as we do not need to keep track of the previous node. We already have a backwards 
pointer for it. At this point, weâ€™ve compared the two major types of linked lists. 
The minor memory load that comes with DLLs can be forgone because of the convenience 
they provide.