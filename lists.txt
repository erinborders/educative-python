LIST FUNCTIONS

- append: runs in O(1) constant time
- insert(index, value): O(n) time
- remove: runs in O(n) time
- pop(index): runs in O(1) time for the last element, and O(k) for kth item removed
- reverse: runs in O(n) time

SLICING

list[start:end]

list[start:] means all numbers greater than start uptil the range

list[:end] means all numbers less than end uptil the range

list[:] means all numbers within the range

list[start:stop:step]

EXAMPLE:
list = list(range(10)) # define a range of values 0
print(list[0:9:2])  # 0, 2, 4, 6, 8  
print(list[9:0:-2])  # 9, 7, 5, 3, 1

arr[start:end] = [list, of, New, values]

EXAMPLE:
x = list(range(5))
print(x)  # 0, 1, 2, 3, 4
x[1:4] = [45, 21, 83]
print(x)  # 0, 45, 21, 83, 4

The del keyword is used to delete elements from a list. 
In the following example, all the elements at even-numbered indices are deleted.

list = list(range(10))
print(list)  # 0, 1, 2, 3, 4, 5, 6, 7, 8, 9
del list[::2]
print(list)  # 1, 3, 5, 7, 9

We can use negative numbers to begin indexing the list elements from the end. For example, 
to access the fifth-last element of a list, we use:
list[-5]

We can also use slicing techniques on strings since strings are lists of characters! 
(well, technically, they’re arrays of characters)

LIST COMPREHENSIONS

With list comprehension, checking a condition and appending to the new list can all 
be done in one line. The code for it starts and ends with a ‘[’ and ends with a ‘]’. 
The basic syntax is:

newList = [expression(i) for i in oldList if filter(i)]

EXAMPLES:
Implement a function that removes all even integers from a given list and returns 
a list of remaining integers 

def remove_even(list):
    return [num for num in list if num % 2 == 1]

LIST MANIPULATION

Implement a function that merges 2 sorted list into one sorted list 

MY ATTEMPT # faster time wise

def merge_lists(lst1, lst2):
    shortest = min(len(lst1), len(lst2))
    a = 0
    b = 0
    ans = []
    for i in range(shortest):
        print(i)
        if lst1[a] < lst2[b]:
            ans.append(lst1[a])
            a += 1
        else:
            ans.append(lst2[b])
            b += 1
    if a < len(lst1):
        return ans + lst1[a:]
    return ans + lst2[b:]

THEIR SOLUTION # better space wise

def merge_lists(lst1, lst2):
    ind1 = 0
    ind2 = 0
    while(ind1 < len(lst1) and ind2 < len(lst2)):
        if(lst1[ind1] > lst2[ind2]):
            lst1.insert(ind1, lst2[ind2])
            ind1 += 1
            ind2 += 1
        else:
            ind1 += 1

    if(ind2 < len(lst2)):
        lst1.extend(lst2[ind2:])
    return lst1

----

Find the 2 integers in a given list that add up to the given number 

def find_sum(lst, k):
    matches = {}
    for num in lst:
        pair = k - num
        if num in matches:
            return [num, matches[num]]
        else:
            matches[pair] = num
    return None

BINARY SOLUTION = creating a binary search function then calling it in a separate
function that actually inputs the list and target number 

def binary_search(a, item):
    first = 0
    last = len(a) - 1
    found = False
    index = -1
    while first <= last and not found:
        mid = (first + last) // 2
        if a[mid] == item:
            index = mid
            found = True
        else:
            if item < a[mid]:
                last = mid - 1
            else:
                first = mid + 1
    if found:
        return index
    else:
        return -1


def find_sum(lst, k):
    lst.sort()
    for j in range(len(lst)):
        # find the difference in list through binary search
        # return the only if we find an index
        index = binary_search(lst, k -lst[j])
        if index is not -1 and index is not j:
            return [lst[j], k -lst[j]]
    

MOVING INDICES SOLUTION 

def find_sum(lst, k):
    # sort the list
    lst.sort()
    index1 = 0
    index2 = len(lst) - 1
    result = []
    sum = 0
    # iterate from front and back
    # move accordingly to reach the sum to be equal to k
    # returns false when the two indices meet
    while (index1 != index2):
        sum = lst[index1] + lst[index2]
        if sum < k:
            index1 += 1
        elif sum > k:
            index2 -= 1
        else:
            result.append(lst[index1])
            result.append(lst[index2])
            return result
    return False

-----

A list such that each index has a product of all the numbers in the 
list except the number stored at that index.

def find_product(lst):
    product = 1
    for num in lst:
        product *= num 
    return [int(product/num) for num in lst]

-----

Find min in array 

def find_minimum(arr):
    min = arr[0]
    for num in arr:
        if num < min:
            min = num 
    return min

# or can use sort function - python's sort function changes the og list, and is 
typically logn time complexity

------

Find the first non duplicate in the list 

def find_first_unique(lst):
    ans = []
    for num in lst:
        if num in ans:
            ans.remove(num)
        else:
            ans.append(num)
    return ans[0]

-------

Return second largest number in list 

def find_second_maximum(lst):
    lst.sort()
    index1 = -1
    index2 = -2
    while index2 >= 0:
        if lst[index2] == lst[index1]:
            index2 -= 1
    return lst[index2]

# their solution in one traversal

def find_second_maximum(lst):
   if (len(lst) < 2):
       return
   # initialize the two to infinity
   max = second_max = float('-inf')
   for i in range(len(lst)):
       # update the max max if max value found
       if (lst[i] > max):
           second_max = max
           max = lst[i]
       # check if it is the second_max max and not equal to max
       elif (lst[i] > second_max and lst[i] != max):
           second_max = lst[i]
   if (second_max == float('-inf')):
       return
   else:
       return second_max